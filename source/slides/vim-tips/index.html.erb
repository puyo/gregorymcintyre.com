---
title: Vim Tips
date: 2017-07-21 09:00 AEST
theme: solarized
syntax_theme: atom-one-light
---

<section data-markdown data-separator="\n====\n">
<textarea data-template>

# Vim Tips

[@gregmcintyre](https://twitter.com/gregmcintyre) 2017

====

## Vim Tips

* Beginner
* Intermediate
* Advanced

====

## Beginner Vim

```js
f(world, hello);
```

---

```vim
<Right><Right>
xxxxxihello<Esc>
<Right><Right><Right>
xxxxxiworld<Esc>
```

====

## Beginner Vim

* `<Right>` = move cursor right
* `x` = delete character
* `i` = enter insert mode
* `<Esc>` = exit insert mode

====

## Beginner Vim

* Lots of keystrokes (or use the mouse!)
* Lots of repetition

====

## Vim Tips

* ~~Beginner~~
* Intermediate
* Advanced

====

## Intermediate Vim

```js
f(world, hello);
```

---

```vim
wwcwhello<Esc>wwcwworld<Esc>
```

====

## Intermediate Vim

```js
class MyClass {
  myMethod() {
    return subRoutine(); // wcwgreeting<Esc>
  }                      // jjb
  subRoutine() {         // .
    return "Hello World";
  }
}
```

====

## Intermediate Vim

* `h/j/k/l` = move cursor left/down/up/right
* `c` = change (delete the next cursor movement, enter insert mode)
* `w` = word (move cursor forward by one word)
* `j` = move cursor down
* `b` = move back one word
* `.` = repeat last "edit"

====

## Intermediate Vim

* Command + movement = edit!
* Repeat as necessary
* Fewer keystrokes
* Try combinations of commands/movements
* Command vocabulary
* Movement vocabulary

====

## Intermediate Vim

| commands |                               |
| ----     | ----------------------------- |
| `c`      | change                        |
| `d`      | delete (also cut)             |
| `y`      | copy                          |
| `p`/`P`  | paste on previous/next line   |
| `v`/`V`  | select text/line              |

====

## Intermediate Vim

| motions |                               |
| ----    | ----------------------------- |
| `b`/`w` | prev/next word                |
| `{`/`}` | prev/next blank line          |

====

## Quiz

`{d}`

====

## Vim Tips

* ~~Beginner~~
* ~~Intermediate~~
* Advanced

====

## Advanced Vim

* Higher level commands
* Higher level motions
* Text objects
* Modeline
* Plugins

====

## Advanced Vim

| commands |                               |
| ----     | ----------------------------- |
| `=`      | indent                        |
| `==`     | indent current line           |
| `>`/`<`  | indent/unindent               |
| `>>`/`<<`| indent/unindent current line  |
| `gq`     | format text with hard wrap    |
| `J`      | join (remove newlines)        |
| `10j`    | repeat j 10 times             |

====

## Quiz

* `{gq}`
* `gqq`
* `V10>`

====

## Advanced Vim

| motions  |                                   |
| ----     | -----------------------------     |
| `fx`     | forward until the next letter "x" |
| `^`/`$`  | start/end of line                 |
| `gg`/`G` | start/end of file                 |
| `?`/`/`  | search back/forwards |

====

## Quiz

* `gg=G`
* `d?Quiz<Return>`

====

## Text Objects

| apply to... |                               |
| ----        | ----------------------------- |
| `iw`/`aw`   | word                          |
| `is`/`as`   | sentence                      |
| `ip`/`ap`   | paragraph                     |
| `i"`/`a"`   | double quoted text            |
| `i(`/`a(`   | text in brackets              |
| `it`/`at`   | text in HTML tag              |

====

## Quiz

* `dap`
* `ci"Hello World<Esc>`

====

## Modeline

The Vim command prompt

```vim
:<Tab>
```

====

## Modeline

```js
// :bufdo %s/\<subRoutine\>/newName/gc
class MyCode {
  main() {
    subRoutine(); // y
  }
  subRoutine() {  // y
    return "Yay";
  }
} // y/n for other files
```

====

## Advanced Vim

```vim
:bufdo %s/\<subRoutine\>/newName/gc
```

* `bufdo` = repeat on all open files
* `%` = select the whole file
* `s` = substitute using regex
* `\<` = beginning of a word (regex)
* `\>` = end of a word (regex)
* `g` = all occurances on each line
* `c` = confirmation prompt
* `:help bufdo`
* `:help substitute`

====

## Plugins

* Themes
* Syntax highlighting

====

## Plugins

* New text objects
  * current indent level (`dii`)
  * comma separated argument (`daa`)
  * Ruby expression (`dar`)

====

## Plugins

* New commands
  * quote/unquote (`ysiw"`, `ds"`)
  * toggle comment (`gcar`)

====

## Quiz

What are some hypothetical "text objects" you work with? What "commands" do you
run on them?

====

[gregorymcintyre.com/slides/intro-vim/](http://gregorymcintyre.com/slides/intro-vim/#/)

</textarea>
</section>
