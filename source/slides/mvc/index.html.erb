---
title: MVC
date: 2017-07-24 09:00 AEST
theme: solarized
syntax_theme: atom-one-light
---

<!--
<style>
path { stroke-dasharray: 1000; stroke-dashoffset: 1000; animation: dash 5s linear forwards; }

@keyframes dash {
  50% { stroke-dashoffset: 1000; }
  100% { stroke-dashoffset: 0; }
}
</style>
-->

<section data-markdown data-separator="\n====\n">
  <textarea data-template>

# MVC

[@gregmcintyre](https://twitter.com/gregmcintyre) 2017

<%#
- Context: Browser/server diagram
- Purpose of this presentation
- Zoom into server
- Visiting a web address is like calling a function
- Sample functions
- Identify common pattern
- Elixir example
- Summary
- Thanks Blake
%>

====

## The Story So Far

<object type="image/svg+xml" data="browser-server.svg"></object>

====

## How?

```elixir
def youtube_search(query) do
  # ?
end
```

====

## First Draft

```elixir
def youtube_search(query) do
  # 1. search results from a database
  # 2. send back HTML with videos
end
```
<!-- .element: class="small" -->

====

## 1.

```elixir
# 1. search results from a database
list_of_videos = query_giant_database(
"SELECT title, href, img_src, ...
 FROM videos
 WHERE $query IN search_terms",
  query: request.query
)
```
<!-- .element: class="small" -->

====

## 2.

```elixir
# 2. send back HTML with results
send_back "<html><body>"
send_back "<ol>"
Enum.each list_of_videos, fn(v) ->
  send_back video_html(v)
end
send_back "</ol>"
send_back "</body></html>"

def video_html(video) do
  return "<video>" # ... complicated
end
```
<!-- .element: class="small" -->

====

## Summary

```elixir
def youtube_search(request) do
  list_of_videos = "SELECT * FROM videos ... "
  send_back "<html> ... videos ... </html>"
end
```
<!-- .element: class="small" -->

====

## Next

```elixir
def youtube_search(request) do
  # 1. search results from a database
  # 2. send back HTML with videos
end

def my_channel(request) do
  # 1. get channel videos from a database
  # 2. send back HTML with videos
end
```
<!-- .element: class="tiny" -->

====
<!-- .slide: data-transition="slide-in fade-out" -->

## ...Next

```elixir
def youtube_search(request) do
  # 1. search results from a database
  # 2. send back HTML with videos
end

def my_channel(request) do
  # 1. get channel videos from a database
  # 2. send back HTML with videos
end

def subscriptions(request) do
  # 1. get subscription videos from a database
  # 2. send back HTML with videos
end
```
<!-- .element: class="tiny" -->

====
<!-- .slide: data-transition="fade-in fade-out" -->

## Pattern

```elixir
def youtube_search(request) do
  # talk with database
  # send back HTML
end

def my_channel(request) do
  # talk with database
  # send back HTML
end

def subscriptions(request) do
  # talk with database
  # send back HTML
end
```
<!-- .element: class="tiny" -->

====
<!-- .slide: data-transition="fade-in slide-out" -->

## Group Similar Code Into Modules

```elixir
defmodule Controller do

def youtube_search(request) do
  result = Model.search_videos(request.query)
  View.present_search(result)
end

def my_channel(request) do
  result = Model.get_channel_videos(request.user)
  View.present_channel(result)
end

def subscriptions(request) do
  result = Model.get_subscription_videos(request.user)
  View.present_subscriptions(result)
end

end
```
<!-- .element: class="tiny" -->

====
<!-- .slide: data-transition="fade-in slide-out" -->

## Group All the Database Code

```elixir
# All the database stuff
defmodule Model do

def search_videos(query) do
  return query_giant_database(...)
end

def get_channel_videos(user) do
  return query_giant_database(...)
end

def get_subscription_videos(user) do
  return query_giant_database(...)
end

end
```
<!-- .element: class="tiny" -->
====
<!-- .slide: data-transition="fade-in slide-out" -->

## Group All the HTML Code

```elixir
# All the HTML stuff
defmodule View do

def present_search(list_of_videos) do
  send_back "<html> ... videos ... </html>"
end

def present_channel(list_of_videos) do
  send_back "<html> ... videos ... </html>"
end

def present_subscriptions(list_of_videos) do
  send_back "<html> ... videos ... </html>"
end

def video_html(video) do
  return "<video>" # ...
end

end
```
<!-- .element: class="tiny" -->

====

## Phoenix Controller

```elixir
defmodule YouTube.Web.VideoController do

def index(conn, %{"query" => query}) do
  videos = YouTube.search_videos(query)
  render(conn, "index.html", videos: videos)
end

# ...

end
```
<!-- .element: class="small" -->

====

## Phoenix Model (Usage)

```elixir
defmodule YouTube do

def search_videos(query) do
  Repo.all(
    from video in Video,
    where: query in video.search_terms
  )
end

end
```
<!-- .element: class="small" -->

====

## Phoenix View (Template)

```erb
<h2>Listing Videos</h2>

<%%= for video <- @videos do %>
<div>
  <h3><%%= video.name %></h3>
  <div>
    <span><%%= link "Show", to: video_path(@conn, :show, video) %></span>
    <span><%%= link "Edit", to: video_path(@conn, :edit, video) %></span>
    <span><%%= link "Delete", to: video_path(@conn, :delete, video), method: :delete %></span>
  </div>
</div>
<%% end %>

<span><%%= link "New video", to: video_path(@conn, :new) %></span>
```
<!-- .element: class="tiny" -->

====

## History

This pattern was adapted from desktop applications

====

## Each Module Deals With...

<object type="image/svg+xml" data="workstation.svg"></object>

====

## Jargon: Controller

* Functions to handle events (like web requests)
* Let you "control" the computer

====

## Jargon: Model

* Functions to fetch/search/read/write information
* Your "model" of the information

====

## Jargon: View

* Functions to update what you see (e.g. send back HTML)
* Your "view" of the information

====
<!-- .slide: data-transition="slide-in fade-out" -->

## Next Time You're Doing This

<object type="image/svg+xml" data="browser-server.svg"></object>

====
<!-- .slide: data-transition="fade-in slide-out" -->

## Imagine This

<object type="image/svg+xml" data="mvc.svg"></object>

====

[gregorymcintyre.com/slides/mvc/](http://gregorymcintyre.com/slides/mvc/#/)

<small class="wysiwyg-font-size-large">(face icon by <a title="Freepik" href="http://www.freepik.com">Freepik</a> from <a title="Flaticon" href="http://www.flaticon.com">www.flaticon.com</a>)</small>

</textarea>
</section>
<%#
vim: filetype=markdown:spell
%>
